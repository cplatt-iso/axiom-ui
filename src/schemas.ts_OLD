// src/schemas.ts
import { z } from 'zod';

export const RoleSchema = z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().optional().nullable(),
});
export type Role = z.infer<typeof RoleSchema>;

export const UserSchema = z.object({
    id: z.number(),
    email: z.string().email(),
    google_id: z.string().optional().nullable(),
    full_name: z.string().optional().nullable(),
    picture: z.string().url().optional().nullable(),
    is_active: z.boolean(),
    is_superuser: z.boolean(),
    roles: z.array(RoleSchema),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
});
export type User = z.infer<typeof UserSchema>;

export const UserWithRolesSchema = UserSchema;
export type UserWithRoles = User;

export const ApiKeySchema = z.object({
    id: z.number(),
    name: z.string(),
    prefix: z.string(),
    is_active: z.boolean(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    last_used_at: z.string().datetime().optional().nullable(),
    user_id: z.number(),
});
export type ApiKey = z.infer<typeof ApiKeySchema>;

export const ApiKeyCreateResponseSchema = ApiKeySchema.extend({
    full_key: z.string(),
});
export type ApiKeyCreateResponse = z.infer<typeof ApiKeyCreateResponseSchema>;

export const MatchOperationSchema = z.enum([
    "eq", "ne", "gt", "lt", "ge", "le",
    "contains", "startswith", "endswith",
    "exists", "not_exists", "regex",
    "in", "not_in",
    "ip_eq", "ip_startswith", "ip_in_subnet"
]);
export type MatchOperation = z.infer<typeof MatchOperationSchema>;

export const ModifyActionSchema = z.enum([
    "set", "delete", "prepend", "suffix", "regex_replace", "copy", "move"
]);
export type ModifyAction = z.infer<typeof ModifyActionSchema>;

export const associationParameterSchema = z.enum([
    "CALLING_AE_TITLE", "CALLED_AE_TITLE", "SOURCE_IP"
]);
export type AssociationParameter = z.infer<typeof associationParameterSchema>;

export const MatchCriterionFormDataSchema = z.object({
    tag: z.string().min(1, "Tag is required"),
    op: MatchOperationSchema,
    value: z.any().optional(),
}).refine(data => {
    const valueRequiredOps = [
        "eq", "ne", "gt", "lt", "ge", "le",
        "contains", "startswith", "endswith", "regex", "in", "not_in",
        "ip_eq", "ip_startswith", "ip_in_subnet"
    ];
    if (valueRequiredOps.includes(data.op) && (data.value === undefined || data.value === null || data.value === '')) {
        return false;
    }
    return true;
}, {
    message: "Value is required for this operation",
    path: ["value"],
});
export type MatchCriterionFormData = z.infer<typeof MatchCriterionFormDataSchema>;

export const AssociationMatchCriterionFormDataSchema = z.object({
    parameter: associationParameterSchema,
    op: MatchOperationSchema,
    value: z.string().min(1, "Value is required"),
});
export type AssociationMatchCriterionFormData = z.infer<typeof AssociationMatchCriterionFormDataSchema>;

export const TagSetModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.set),
    tag: z.string().min(1, "Target tag is required"),
    value: z.any().optional(),
    vr: z.string().length(2, "VR must be 2 uppercase letters").regex(/^[A-Z]{2}$/).optional().nullable(),
});

export const TagDeleteModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.delete),
    tag: z.string().min(1, "Target tag is required"),
});

export const TagPrependModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.prepend),
    tag: z.string().min(1, "Target tag is required"),
    value: z.string().min(1, "Value to prepend is required"),
});

export const TagSuffixModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.suffix),
    tag: z.string().min(1, "Target tag is required"),
    value: z.string().min(1, "Value to suffix is required"),
});

export const TagRegexReplaceModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.regex_replace),
    tag: z.string().min(1, "Target tag is required"),
    pattern: z.string().min(1, "Regex pattern is required"),
    replacement: z.string(),
});

export const TagCopyModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.copy),
    source_tag: z.string().min(1, "Source tag is required"),
    destination_tag: z.string().min(1, "Destination tag is required"),
    destination_vr: z.string().length(2, "VR must be 2 uppercase letters").regex(/^[A-Z]{2}$/).optional().nullable(),
});

export const TagMoveModificationSchema = z.object({
    action: z.literal(ModifyActionSchema.enum.move),
    source_tag: z.string().min(1, "Source tag is required"),
    destination_tag: z.string().min(1, "Destination tag is required"),
    destination_vr: z.string().length(2, "VR must be 2 uppercase letters").regex(/^[A-Z]{2}$/).optional().nullable(),
});

export const TagModificationFormDataSchema = z.discriminatedUnion("action", [
    TagSetModificationSchema,
    TagDeleteModificationSchema,
    TagPrependModificationSchema,
    TagSuffixModificationSchema,
    TagRegexReplaceModificationSchema,
    TagCopyModificationSchema,
    TagMoveModificationSchema,
]);
export type TagModificationFormData = z.infer<typeof TagModificationFormDataSchema>;

export const RuleFormDataSchema = z.object({
    name: z.string().min(1, "Rule name is required"),
    description: z.string().optional().nullable(),
    priority: z.number().int(),
    is_active: z.boolean(),
    // --- REMOVED .min(1) constraint ---
    match_criteria: z.array(MatchCriterionFormDataSchema),
    // --- END REMOVED ---
    association_criteria: z.array(AssociationMatchCriterionFormDataSchema).optional().nullable(),
    tag_modifications: z.array(TagModificationFormDataSchema),
    applicable_sources: z.array(z.string()).optional().nullable(),
    destination_ids: z.array(z.number().int().positive()).min(1, "At least one destination is required"),
});
export type RuleFormData = z.infer<typeof RuleFormDataSchema>;

export const StorageBackendConfigReadSchema = z.object({
  id: z.number(),
  name: z.string(),
  description: z.string().nullable(),
  backend_type: z.string(),
  config: z.record(z.any()),
  is_enabled: z.boolean(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});
export type StorageBackendConfigRead = z.infer<typeof StorageBackendConfigReadSchema>;

export const RuleSchema = z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().optional().nullable(),
    is_active: z.boolean(),
    priority: z.number(),
    ruleset_id: z.number(),
    match_criteria: z.record(z.any()),
    tag_modifications: z.array(z.record(z.any())),
    association_criteria: z.array(z.record(z.any())).optional().nullable(),
    applicable_sources: z.array(z.string()).optional().nullable(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime().optional().nullable(),
    destinations: z.array(StorageBackendConfigReadSchema),
});
export type Rule = z.infer<typeof RuleSchema>;

export const RulesetSchema = z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().optional().nullable(),
    is_active: z.boolean(),
    priority: z.number(),
    execution_mode: z.enum(["FIRST_MATCH", "ALL_MATCHES"]),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime().optional().nullable(),
    rules: z.array(RuleSchema),
});
export type Ruleset = z.infer<typeof RulesetSchema>;

export const DicomWebSourceConfigReadSchema = z.object({
    id: z.number(),
    name: z.string(),
    source_name: z.string(),
    description: z.string().nullable(),
    base_url: z.string().url(),
    qido_prefix: z.string(),
    wado_prefix: z.string(),
    polling_interval_seconds: z.number().int().positive(),
    is_enabled: z.boolean(),
    auth_type: z.enum(["none", "basic", "bearer", "apikey"]),
    auth_config: z.record(z.any()).nullable(),
    search_filters: z.record(z.any()).nullable(),
    last_processed_timestamp: z.string().datetime().optional().nullable(),
    last_successful_run: z.string().datetime().optional().nullable(),
    last_error_run: z.string().datetime().optional().nullable(),
    last_error_message: z.string().nullable(),
    found_instance_count: z.number().int().nonnegative().default(0),
    queued_instance_count: z.number().int().nonnegative().default(0),
    processed_instance_count: z.number().int().nonnegative().default(0),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
});
export type DicomWebSourceConfigRead = z.infer<typeof DicomWebSourceConfigReadSchema>;

export const DicomWebSourceConfigCreatePayloadSchema = z.object({
    name: z.string().min(1),
    description: z.string().optional().nullable(),
    base_url: z.string().url(),
    qido_prefix: z.string().optional().default("qido-rs"),
    wado_prefix: z.string().optional().default("wado-rs"),
    polling_interval_seconds: z.number().int().positive().optional().default(300),
    is_enabled: z.boolean().optional().default(true),
    auth_type: z.enum(["none", "basic", "bearer", "apikey"]).optional().default("none"),
    auth_config: z.record(z.any()).optional().nullable(),
    search_filters: z.record(z.any()).optional().nullable(),
});
export type DicomWebSourceConfigCreatePayload = z.infer<typeof DicomWebSourceConfigCreatePayloadSchema>;

export const DicomWebSourceConfigUpdatePayloadSchema = z.object({
    name: z.string().min(1).optional(),
    description: z.string().optional().nullable(),
    base_url: z.string().url().optional(),
    qido_prefix: z.string().optional(),
    wado_prefix: z.string().optional(),
    polling_interval_seconds: z.number().int().positive().optional(),
    is_enabled: z.boolean().optional(),
    auth_type: z.enum(["none", "basic", "bearer", "apikey"]).optional(),
    auth_config: z.record(z.any()).optional().nullable(),
    search_filters: z.record(z.any()).optional().nullable(),
});
export type DicomWebSourceConfigUpdatePayload = z.infer<typeof DicomWebSourceConfigUpdatePayloadSchema>;

export const DimseListenerConfigReadSchema = z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().nullable(),
    ae_title: z.string(),
    port: z.number().int(),
    is_enabled: z.boolean(),
    instance_id: z.string().nullable(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
});
export type DimseListenerConfigRead = z.infer<typeof DimseListenerConfigReadSchema>;

export const DimseListenerConfigCreatePayloadSchema = z.object({
    name: z.string().min(1),
    description: z.string().optional().nullable(),
    ae_title: z.string().min(1).max(16),
    port: z.number().int().gt(0).lt(65536),
    is_enabled: z.boolean().optional().default(true),
    instance_id: z.string().optional().nullable(),
});
export type DimseListenerConfigCreatePayload = z.infer<typeof DimseListenerConfigCreatePayloadSchema>;

export const DimseListenerConfigUpdatePayloadSchema = z.object({
    name: z.string().min(1).optional(),
    description: z.string().optional().nullable(),
    ae_title: z.string().min(1).max(16).optional(),
    port: z.number().int().gt(0).lt(65536).optional(),
    is_enabled: z.boolean().optional(),
    instance_id: z.string().optional().nullable(),
});
export type DimseListenerConfigUpdatePayload = z.infer<typeof DimseListenerConfigUpdatePayloadSchema>;

export const DimseQueryRetrieveSourceReadSchema = z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().nullable(),
    remote_ae_title: z.string(),
    remote_host: z.string(),
    remote_port: z.number().int(),
    local_ae_title: z.string(),
    polling_interval_seconds: z.number().int().positive(),
    is_enabled: z.boolean(),
    query_level: z.string(),
    query_filters: z.record(z.any()).nullable(),
    move_destination_ae_title: z.string().nullable(),
    last_successful_query: z.string().datetime().optional().nullable(),
    last_successful_move: z.string().datetime().optional().nullable(),
    last_error_time: z.string().datetime().optional().nullable(),
    last_error_message: z.string().nullable(),
    found_study_count: z.number().int().nonnegative().default(0),
    move_queued_study_count: z.number().int().nonnegative().default(0),
    processed_instance_count: z.number().int().nonnegative().default(0),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
});
export type DimseQueryRetrieveSourceRead = z.infer<typeof DimseQueryRetrieveSourceReadSchema>;

export const DimseQueryRetrieveSourceCreatePayloadSchema = z.object({
    name: z.string().min(1),
    description: z.string().optional().nullable(),
    remote_ae_title: z.string().min(1).max(16),
    remote_host: z.string().min(1),
    remote_port: z.number().int().gt(0).lt(65536),
    local_ae_title: z.string().min(1).max(16).optional().default("AXIOM_QR_SCU"),
    polling_interval_seconds: z.number().int().positive().optional().default(300),
    is_enabled: z.boolean().optional().default(true),
    query_level: z.enum(["STUDY", "SERIES", "PATIENT"]).optional().default("STUDY"),
    query_filters: z.record(z.any()).optional().nullable(),
    move_destination_ae_title: z.string().min(1).max(16).optional().nullable(),
});
export type DimseQueryRetrieveSourceCreatePayload = z.infer<typeof DimseQueryRetrieveSourceCreatePayloadSchema>;

export const DimseQueryRetrieveSourceUpdatePayloadSchema = z.object({
    name: z.string().min(1).optional(),
    description: z.string().optional().nullable(),
    remote_ae_title: z.string().min(1).max(16).optional(),
    remote_host: z.string().min(1).optional(),
    remote_port: z.number().int().gt(0).lt(65536).optional(),
    local_ae_title: z.string().min(1).max(16).optional(),
    polling_interval_seconds: z.number().int().positive().optional(),
    is_enabled: z.boolean().optional(),
    query_level: z.enum(["STUDY", "SERIES", "PATIENT"]).optional(),
    query_filters: z.record(z.any()).optional().nullable(),
    move_destination_ae_title: z.string().min(1).max(16).optional().nullable(),
});
export type DimseQueryRetrieveSourceUpdatePayload = z.infer<typeof DimseQueryRetrieveSourceUpdatePayloadSchema>;

export const StorageBackendConfigCreatePayloadSchema = z.object({
    name: z.string().min(1),
    description: z.string().optional().nullable(),
    backend_type: z.enum(["filesystem", "cstore", "gcs", "google_healthcare", "stow_rs"]),
    config: z.record(z.any()),
    is_enabled: z.boolean().optional().default(true),
});
export type StorageBackendConfigCreatePayload = z.infer<typeof StorageBackendConfigCreatePayloadSchema>;

export const StorageBackendConfigUpdatePayloadSchema = z.object({
    name: z.string().min(1).optional(),
    description: z.string().optional().nullable(),
    backend_type: z.enum(["filesystem", "cstore", "gcs", "google_healthcare", "stow_rs"]).optional(),
    config: z.record(z.any()).optional(),
    is_enabled: z.boolean().optional(),
});
export type StorageBackendConfigUpdatePayload = z.infer<typeof StorageBackendConfigUpdatePayloadSchema>;

export const DicomWebSourceStatusSchema = z.object({
    id: z.number(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    source_name: z.string(),
    is_enabled: z.boolean(),
    last_processed_timestamp: z.string().datetime().optional().nullable(),
    last_successful_run: z.string().datetime().optional().nullable(),
    last_error_run: z.string().datetime().optional().nullable(),
    last_error_message: z.string().optional().nullable(),
    found_instance_count: z.number().int().default(0),
    queued_instance_count: z.number().int().default(0),
    processed_instance_count: z.number().int().default(0),
});
export type DicomWebSourceStatus = z.infer<typeof DicomWebSourceStatusSchema>;

export const DicomWebPollersStatusResponseSchema = z.object({
    pollers: z.array(DicomWebSourceStatusSchema).default([]),
});
export type DicomWebPollersStatusResponse = z.infer<typeof DicomWebPollersStatusResponseSchema>;

export const DimseListenerStatusSchema = z.object({
    id: z.number(),
    listener_id: z.string(),
    status: z.string(),
    status_message: z.string().optional().nullable(),
    host: z.string().optional().nullable(),
    port: z.number().int().optional().nullable(),
    ae_title: z.string().optional().nullable(),
    last_heartbeat: z.string().datetime(),
    created_at: z.string().datetime(),
    received_instance_count: z.number().int().default(0),
    processed_instance_count: z.number().int().default(0),
});
export type DimseListenerStatus = z.infer<typeof DimseListenerStatusSchema>;

export const DimseListenersStatusResponseSchema = z.object({
    listeners: z.array(DimseListenerStatusSchema).default([]),
});
export type DimseListenersStatusResponse = z.infer<typeof DimseListenersStatusResponseSchema>;

export const DimseQrSourceStatusSchema = z.object({
    id: z.number(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    name: z.string(),
    is_enabled: z.boolean(),
    remote_ae_title: z.string(),
    remote_host: z.string(),
    remote_port: z.number().int(),
    last_successful_query: z.string().datetime().optional().nullable(),
    last_successful_move: z.string().datetime().optional().nullable(),
    last_error_time: z.string().datetime().optional().nullable(),
    last_error_message: z.string().optional().nullable(),
    found_study_count: z.number().int().default(0),
    move_queued_study_count: z.number().int().default(0),
    processed_instance_count: z.number().int().default(0),
});
export type DimseQrSourceStatus = z.infer<typeof DimseQrSourceStatusSchema>;

export const DimseQrSourcesStatusResponseSchema = z.object({
    sources: z.array(DimseQrSourceStatusSchema).default([]),
});
export type DimseQrSourcesStatusResponse = z.infer<typeof DimseQrSourcesStatusResponseSchema>;

export const ComponentStatusSchema = z.object({
    status: z.string(),
    details: z.string().nullable().optional(),
});
export type ComponentStatus = z.infer<typeof ComponentStatusSchema>;

export const SystemStatusReportSchema = z.object({
    status: z.string(),
    components: z.record(ComponentStatusSchema),
});
export type SystemStatusReport = z.infer<typeof SystemStatusReportSchema>;

export const AuthTypeSchema = z.enum(["none", "basic", "bearer", "apikey"]);
export type AuthType = z.infer<typeof AuthTypeSchema>;
